name: Aqua
on:
  push:
    branches:
      - main

env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_REGISTRY: "stanhoe"
      DOCKER_REPOSITORY: "spring4shell2"
      IMAGE_TAG: ${{ github.sha }}
      BUILD_NUMBER: ${{ github.run_id }}
      BUILD_NAME: ${{ github.repository }}
      AQUA_TOKEN: ${{ secrets.AQUA_TOKEN }} # Aqua Scanner authentication
      AQUA_HOST: ${{ secrets.AQUA_HOST }} # Aqua Scanner authentication
      AQUA_USER: ${{ secrets.AQUA_USER }} # Aqua Registry
      AQUA_PASSWORD: ${{ secrets.AQUA_PASSWORD }} # Aqua Registry

jobs:
  code-scanning:
    name: Aqua Code Scanner
    runs-on: ubuntu-latest
    environment: main
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Aqua Code Scanner
        uses: docker://aquasec/aqua-scanner
        with:
          args: trivy fs --scanners misconfig,vuln,secret . --sast --reachability --format template -o aqua-code-scanner.html --db-repository=registry.aquasec.com/trivy-db:2 --checks-bundle-repository=registry.aquasec.com/trivy-checks:1 --java-db-repository=registry.aquasec.com/trivy-java-db:1
          # To customize which severities to scan for, add the following flag: --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          # To enable SAST scanning, add: --sast
          # To enable reachability scanning, add: --reachability
          # To enable npm/dotnet/gradle non-lock file scanning, add: --package-json / --dotnet-proj / --gradle
        env:
          AQUA_KEY: ${{ secrets.AQUA_KEY }}
          AQUA_SECRET: ${{ secrets.AQUA_SECRET }}
          GITHUB_TOKEN: ${{ github.token }}
          AQUA_URL: https://api.asia-1.supply-chain.cloud.aquasec.com
          CSPM_URL: https://asia-1.api.cloudsploit.com
          TRIVY_RUN_AS_PLUGIN: 'aqua'
          INPUT_WORKING_DIRECTORY: '/scanning'
          TRIVY_USERNAME: $AQUA_USER
          TRIVY_PASSWORD: $AQUA_PASSWORD
          # For http/https proxy configuration add env vars: HTTP_PROXY/HTTPS_PROXY, CA-CRET (path to CA certificate)
        
      - name: Upload Aqua Code Scanner Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: aqua-code-scan-results
          path: aqua-code-scanner.*
          
      - name: Manifest Generation (SBOM)
        run: |
          export BILLY_SERVER=https://billy.asia-1.codesec.aquasec.com
          curl -sLo install.sh download.codesec.aquasec.com/billy/install.sh
          curl -sLo install.sh.checksum https://github.com/argonsecurity/releases/releases/latest/download/install.sh.checksum
          if ! cat install.sh.checksum | sha256sum --check; then
          echo "install.sh checksum failed"
          exit 1
          fi
          BINDIR="." sh install.sh
          rm install.sh install.sh.checksum
          ./billy generate \
            --access-token "${{ secrets.GITHUB_TOKEN }}" \
            --aqua-key "${{ secrets.AQUA_KEY }}" \
            --aqua-secret "${{ secrets.AQUA_SECRET }}" \
            --cspm-url https://asia-1.api.cloudsploit.com \
            --artifact-path "$GITHUB_WORKSPACE"
        env:
          TRIVY_USERNAME: $AQUA_USER
          TRIVY_PASSWORD: $AQUA_PASSWORD
          TRIVY_DB_REPOSITORY: registry.aquasec.com/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: registry.aquasec.com/trivy-java-db:1
          TRIVY_CHECKS_BUNDLE_REPOSITORY: registry.aquasec.com/trivy-checks:1

  image-scanning:
    name: Aqua Image Scanner
    needs: code-scanning
    runs-on: ubuntu-latest
    environment: main
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Image Locally
        run: |
          docker build -t "$DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG" .
          
      - name: Run Aqua Image Scanner
        run: |
          docker login registry.aquasec.com -u $AQUA_USER -p $AQUA_PASSWORD
          docker pull registry.aquasec.com/scanner:2406.10.19 
          docker run --rm -v $GITHUB_WORKSPACE:/tmp -v /var/run/docker.sock:/var/run/docker.sock -e BUILD_NUMBER=$BUILD_NUMBER -e BUILD_JOB_NAME=$BUILD_NAME registry.aquasec.com/scanner:2404.30.6 scan -w /tmp --host $AQUA_HOST --token $AQUA_TOKEN --show-negligible --local $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG --register-compliant --registry "Docker Hub" --htmlfile /tmp/aqua-image-scanner.html --jsonfile /tmp/aqua-image-scanner.json > /dev/null

      - name: Upload Aqua Image Scanner Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: aqua-image-scan-results
          path: aqua-image-scanner.*
         
      - name: Manifest Generation (SBOM)
        run: |
          export BILLY_SERVER=https://billy.asia-1.codesec.aquasec.com
          curl -sLo install.sh download.codesec.aquasec.com/billy/install.sh
          curl -sLo install.sh.checksum https://github.com/argonsecurity/releases/releases/latest/download/install.sh.checksum
          if ! cat install.sh.checksum | sha256sum --check; then
          echo "install.sh checksum failed"
          exit 1
          fi
          BINDIR="." sh install.sh
          rm install.sh install.sh.checksum
          ./billy generate \
            --access-token "${{ secrets.GITHUB_TOKEN }}" \
            --aqua-key "${{ secrets.AQUA_KEY }}" \
            --aqua-secret "${{ secrets.AQUA_SECRET }}" \
            --cspm-url https://asia-1.api.cloudsploit.com \
            --artifact-path "$DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG"
        env:
          TRIVY_USERNAME: $AQUA_USER
          TRIVY_PASSWORD: $AQUA_PASSWORD
          TRIVY_DB_REPOSITORY: registry.aquasec.com/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: registry.aquasec.com/trivy-java-db:1
          TRIVY_CHECKS_BUNDLE_REPOSITORY: registry.aquasec.com/trivy-checks:1
            
      - name: Tag and push image to Docker Hub (+latest)
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker tag $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG $DOCKER_REGISTRY/$DOCKER_REPOSITORY:latest
          docker push $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG
          docker push $DOCKER_REGISTRY/$DOCKER_REPOSITORY:latest
